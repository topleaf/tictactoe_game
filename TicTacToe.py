import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    """ 
    A class used to represent a Tic Tac Toe game.
    # Attributes    
    master : tk.Tk
        The root window of the game.
    current_player : str
        The current player, either "X" or "O".
    board_size : int
        The size of the board, default is 3.
    board : list
        A 2D list representing the board.
    buttons : list
        A 2D list of tk.Button objects representing the buttons on the board.
    reset_button : tk.Button
        A tk.Button object used to reset the game.
    current_player_label : tk.Label
        A tk.Label object used to display the current player.
    # Methods
    create_widgets()
        Create the widgets of the game.
    button_click(i, j)
        The callback function for the buttons on the board.
    check_win()
        Check if the current player wins the game.
    check_draw()
        Check if the game is a draw.
    reset_game()
        Reset the game.

        this class are generated by github copilot chat. including this comment

    
    """
    def __init__(self, master, board_size=3):
        self.master = master
        self.master.title("Tic Tac Toe")
        self.current_player = "X"
        self.board_size = board_size
        self.board = [["" for _ in range(board_size)] for _ in range(board_size)]
        self.create_widgets()

    def create_widgets(self):
        self.buttons = []
        for i in range(self.board_size):
            row = []
            for j in range(self.board_size):
                button = tk.Button(self.master, text="", font=("Arial", 20), width=3, height=1,
                                   command=lambda x=i, y=j: self.button_click(x, y))
                button.grid(row=i, column=j)
                row.append(button)
            self.buttons.append(row)

        self.reset_button = tk.Button(self.master, text="Reset", font=("Arial", 14), width=10, height=2,
                                      command=self.reset_game)
        self.reset_button.grid(row=self.board_size, column=self.board_size//2)

        self.current_player_label = tk.Label(self.master, text=f"Current player: {self.current_player}",
                                              font=("Arial", 14))
        self.current_player_label.grid(row=self.board_size+1, column=self.board_size//2)

    def button_click(self, i, j):
        if self.board[i][j] == "":
            self.board[i][j] = self.current_player
            self.buttons[i][j].config(text=self.current_player)
            if self.check_win():
                messagebox.showinfo("Tic Tac Toe", f"{self.current_player} wins!")
                self.reset_game()
            elif self.check_draw():
                messagebox.showinfo("Tic Tac Toe", "Draw!")
                self.reset_game()
            else:
                self.current_player = "O" if self.current_player == "X" else "X"
                self.current_player_label.config(text=f"Current player: {self.current_player}")

    def check_win(self):
        for i in range(self.board_size):
            if all(self.board[i][j] == self.current_player for j in range(self.board_size)):
                return True
            if all(self.board[j][i] == self.current_player for j in range(self.board_size)):
                return True
        if all(self.board[i][i] == self.current_player for i in range(self.board_size)):
            return True
        if all(self.board[i][self.board_size-i-1] == self.current_player for i in range(self.board_size)):
            return True
        return False

    def check_draw(self):
        for i in range(self.board_size):
            for j in range(self.board_size):
                if self.board[i][j] == "":
                    return False
        return True

    def reset_game(self):
        self.current_player = "X"
        self.board = [["" for _ in range(self.board_size)] for _ in range(self.board_size)]
        for i in range(self.board_size):
            for j in range(self.board_size):
                self.buttons[i][j].config(text="")
        self.current_player_label.config(text=f"Current player: {self.current_player}")